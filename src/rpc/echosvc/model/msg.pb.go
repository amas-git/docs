// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msg.proto

package model

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Msg_Type int32

const (
	Msg_HIGH Msg_Type = 0
	Msg_NORM Msg_Type = 1
	Msg_LOW  Msg_Type = 2
)

var Msg_Type_name = map[int32]string{
	0: "HIGH",
	1: "NORM",
	2: "LOW",
}

var Msg_Type_value = map[string]int32{
	"HIGH": 0,
	"NORM": 1,
	"LOW":  2,
}

func (x Msg_Type) String() string {
	return proto.EnumName(Msg_Type_name, int32(x))
}

func (Msg_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{0, 0}
}

type Msg struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Type                 Msg_Type `protobuf:"varint,3,opt,name=type,proto3,enum=model.Msg_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{0}
}

func (m *Msg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Msg.Unmarshal(m, b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return xxx_messageInfo_Msg.Size(m)
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Msg) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Msg) GetType() Msg_Type {
	if m != nil {
		return m.Type
	}
	return Msg_HIGH
}

func init() {
	proto.RegisterEnum("model.Msg_Type", Msg_Type_name, Msg_Type_value)
	proto.RegisterType((*Msg)(nil), "model.Msg")
}

func init() {
	proto.RegisterFile("msg.proto", fileDescriptor_c06e4cca6c2cc899)
}

var fileDescriptor_c06e4cca6c2cc899 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0x2d, 0x4e, 0xd7,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0xcd, 0x4f, 0x49, 0xcd, 0x51, 0x2a, 0xe6, 0x62,
	0xf6, 0x2d, 0x4e, 0x17, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d,
	0x62, 0xca, 0x4c, 0x11, 0x12, 0xe2, 0x62, 0x29, 0x49, 0xad, 0x28, 0x91, 0x60, 0x52, 0x60, 0xd4,
	0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x94, 0xb9, 0x58, 0x4a, 0x2a, 0x0b, 0x52, 0x25, 0x98, 0x15, 0x18,
	0x35, 0xf8, 0x8c, 0xf8, 0xf5, 0xc0, 0x06, 0xe8, 0xf9, 0x16, 0xa7, 0xeb, 0x85, 0x54, 0x16, 0xa4,
	0x06, 0x81, 0x25, 0x95, 0x94, 0xb9, 0x58, 0x40, 0x3c, 0x21, 0x0e, 0x2e, 0x16, 0x0f, 0x4f, 0x77,
	0x0f, 0x01, 0x06, 0x10, 0xcb, 0xcf, 0x3f, 0xc8, 0x57, 0x80, 0x51, 0x88, 0x9d, 0x8b, 0xd9, 0xc7,
	0x3f, 0x5c, 0x80, 0xc9, 0x48, 0x95, 0x8b, 0xc5, 0x35, 0x39, 0x23, 0x5f, 0x48, 0x96, 0x8b, 0xb9,
	0x38, 0xb1, 0x52, 0x88, 0x0b, 0x61, 0x94, 0x14, 0x12, 0x3b, 0x89, 0x0d, 0xec, 0x52, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x02, 0x42, 0x74, 0xb6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoClient interface {
	Say(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error)
}

type echoClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoClient(cc grpc.ClientConnInterface) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Say(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/model.Echo/say", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServer is the server API for Echo service.
type EchoServer interface {
	Say(context.Context, *Msg) (*Msg, error)
}

// UnimplementedEchoServer can be embedded to have forward compatible implementations.
type UnimplementedEchoServer struct {
}

func (*UnimplementedEchoServer) Say(ctx context.Context, req *Msg) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say not implemented")
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Echo/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Say(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "say",
			Handler:    _Echo_Say_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg.proto",
}
